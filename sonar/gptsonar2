<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Browser Sonar Tape Measure</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!-- Tailwind CSS CDN -->
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="min-h-screen flex flex-col items-center justify-center bg-slate-100">
  <div class="bg-white rounded-2xl shadow-xl p-6 w-96 max-w-full">
    <h1 class="text-xl font-bold mb-4 text-center">Browser Sonar</h1>

    <!-- Controls ------------------------------------------------------------>
    <div id="controls" class="grid grid-cols-2 gap-4 text-sm mb-6">
      <label class="flex flex-col">Pulse length (ms)
        <input type="number" id="pulseLen" value="5" min="1" max="20" class="border rounded p-1">
      </label>
      <label class="flex flex-col">Pulse gain (0‑1)
        <input type="number" id="pulseGain" value="1" min="0.1" max="1" step="0.05" class="border rounded p-1">
      </label>
      <label class="flex flex-col">Interval (ms)
        <input type="number" id="intervalMs" value="750" min="100" max="2000" class="border rounded p-1">
      </label>
      <label class="flex flex-col">Min ignore (ms)
        <input type="number" id="minEchoMs" value="10" min="1" max="100" class="border rounded p-1">
      </label>
      <label class="flex flex-col col-span-2">Max distance (m)
        <input type="number" id="maxDist" value="2" min="0.5" max="3" step="0.1" class="border rounded p-1 w-full">
      </label>
    </div>

    <!-- Display ------------------------------------------------------------->
    <p id="status" class="text-center text-gray-600 text-sm mb-2">Idle</p>
    <p id="distance" class="text-center text-4xl font-semibold mb-4">--</p>
    <button id="toggleBtn" class="w-full bg-blue-600 text-white py-2 rounded-xl hover:bg-blue-700 transition">
      Start
    </button>
  </div>

  <!-- Script ---------------------------------------------------------------->
  <script type="module">
  // UI elements
  const statusEl     = document.getElementById('status');
  const distanceEl   = document.getElementById('distance');
  const toggleBtn    = document.getElementById('toggleBtn');
  // control inputs
  const pulseLenIn   = document.getElementById('pulseLen');
  const pulseGainIn  = document.getElementById('pulseGain');
  const intervalIn   = document.getElementById('intervalMs');
  const minEchoIn    = document.getElementById('minEchoMs');
  const maxDistIn    = document.getElementById('maxDist');

  // constants (fixed)
  const SAMPLE_RATE = 48000;           // Hz
  const C_SOUND     = 343.2;           // m/s @ 20 °C
  const PULSE_FREQ  = 4000;            // 4 kHz sine tone (more audible than DC click)

  // runtime vars
  let ctx, workletNode, stream, pingTimer, running = false;

  toggleBtn.addEventListener('click', () => running ? stop() : start());

  async function start(){
    running = true;
    toggleBtn.textContent = 'Stop';
    statusEl.textContent  = 'Requesting microphone…';
    distanceEl.textContent= '--';

    // ---- read controls ----------------------------------------------------
    const pulseLenMs   = clamp(+pulseLenIn.value, 1, 20);
    const PULSE_LENGTH = Math.round(pulseLenMs * SAMPLE_RATE / 1000);
    const PULSE_GAIN   = clamp(+pulseGainIn.value, 0.1, 1);
    const intervalMs   = clamp(+intervalIn.value, 100, 2000);
    const minEchoMs    = clamp(+minEchoIn.value, 1, 100);
    const MIN_ECHO_SAMP= Math.round(minEchoMs * SAMPLE_RATE / 1000);
    const maxDist      = clamp(+maxDistIn.value, 0.5, 3);
    const MAX_ECHO_SAMP= Math.round(maxDist * 2 / C_SOUND * SAMPLE_RATE);

    // ---- audio setup ------------------------------------------------------
    ctx = new (window.AudioContext || window.webkitAudioContext)({sampleRate:SAMPLE_RATE});

    // pulse buffer – short sine burst (louder perceived)
    const pulseBuf = ctx.createBuffer(1, PULSE_LENGTH, ctx.sampleRate);
    const data = pulseBuf.getChannelData(0);
    for(let i=0;i<PULSE_LENGTH;i++) data[i] = PULSE_GAIN * Math.sin(2*Math.PI*PULSE_FREQ*i/ctx.sampleRate);

    // AudioWorklet code -----------------------------------------------------
    const processorCode = `
      class TofProcessor extends AudioWorkletProcessor {
        constructor(){
          super();
          this.ref = null;                 // reference pulse (Float32Array)
          this.minLag = 500;
          this.maxLag = 24000;
          this.buf = new Float32Array(8192);
          this.wpos = 0;
          this.lastEmit = 0;
          this.SR = sampleRate;
          this.port.onmessage = e => {
            if(e.data.type==='pulse') this.ref = e.data.buf;
            if(e.data.type==='config'){
              this.minLag = e.data.minLag|0;
              this.maxLag = e.data.maxLag|0;
            }
          };
        }
        process(inputs){
          if(!this.ref) return true;
          const input = inputs[0][0];
          if(!input) return true;

          // ring‑buffer write
          this.buf.set(input, this.wpos);
          this.wpos = (this.wpos + input.length) % this.buf.length;

          if(currentTime - this.lastEmit < 0.1) return true;
          this.lastEmit = currentTime;

          const winLen = this.ref.length + this.maxLag + 256;
          let win = new Float32Array(winLen);
          for(let i=0;i<winLen;i++){
            const idx=(this.wpos - winLen + i + this.buf.length)%this.buf.length;
            win[i]=this.buf[idx];
          }

          let best=0, bestLag=-1;
          const maxSearch = Math.min(this.maxLag, winLen - this.ref.length);
          for(let lag=this.minLag; lag<maxSearch; lag++){
            let s=0;
            for(let j=0;j<this.ref.length;j++) s+= this.ref[j]*win[lag+j];
            if(s>best){best=s; bestLag=lag;}
          }
          if(bestLag>0){
            const dt = bestLag / this.SR;
            const dist = dt * ${C_SOUND} / 2;
            this.port.postMessage({type:'distance', meters:dist});
          }
          return true;
        }
      }
      registerProcessor('tof-proc', TofProcessor);
    `;
    const blobURL = URL.createObjectURL(new Blob([processorCode], {type:'application/javascript'}));
    await ctx.audioWorklet.addModule(blobURL);

    // create worklet node and stream
    workletNode = new AudioWorkletNode(ctx,'tof-proc');
    workletNode.port.onmessage = e => {
      if(e.data.type==='distance') updateDistance(e.data.meters);
    };

    workletNode.port.postMessage({type:'pulse',   buf:pulseBuf.getChannelData(0)});
    workletNode.port.postMessage({type:'config',  minLag: MIN_ECHO_SAMP, maxLag: MAX_ECHO_SAMP});

    stream = await navigator.mediaDevices.getUserMedia({
      audio:{echoCancellation:false, noiseSuppression:false, autoGainControl:false}
    });
    ctx.createMediaStreamSource(stream).connect(workletNode);

    statusEl.textContent = 'Running…';

    // periodic pulses -------------------------------------------------------
    emitPulse(pulseBuf);
    pingTimer = setInterval(()=>emitPulse(pulseBuf), intervalMs);
  }

  function stop(){
    running = false;
    toggleBtn.textContent = 'Start';
    statusEl.textContent  = 'Stopped';
    clearInterval(pingTimer);
    if(stream){ stream.getTracks().forEach(t=>t.stop()); stream=null; }
    if(ctx){ ctx.close(); ctx=null; }
  }

  function emitPulse(buf){
    const src = ctx.createBufferSource();
    src.buffer = buf;
    src.connect(ctx.destination);
    src.start();
  }

  function updateDistance(m){
    if(Number.isFinite(m) && m>0) distanceEl.textContent = m.toFixed(2)+' m';
  }

  const clamp = (v,min,max)=>Math.min(Math.max(v,min),max);
  </script>
</body>
</html>
